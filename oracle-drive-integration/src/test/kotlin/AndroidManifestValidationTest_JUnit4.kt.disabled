@file:Suppress("MemberVisibilityCanBePrivate", "SpellCheckingInspection")
import org.junit.Assert.*
import org.junit.Test
import java.io.ByteArrayInputStream
import java.nio.charset.StandardCharsets
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.parsers.ParserConfigurationException
import org.xml.sax.SAXParseException

class AndroidManifestValidationTest_JUnit4 {
    private fun parse(xml: String) = runCatching {
        val factory = DocumentBuilderFactory.newInstance().apply {
            isNamespaceAware = true
            isValidating = false
            setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
        }
        val builder = factory.newDocumentBuilder()
        ByteArrayInputStream(xml.toByteArray(StandardCharsets.UTF_8)).use { input ->
            builder.parse(input)
        }
    }

    private val baselineManifest = """
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android">
        </manifest>
    """.trimIndent()

    @Test fun baseline_manifest_isWellFormed() {
        val doc = parse(baselineManifest).getOrNull()
        assertNotNull(doc)
        assertEquals("manifest", doc!!.documentElement.nodeName)
    }

    @Test fun baseline_manifest_hasAndroidNamespace() {
        val doc = parse(baselineManifest).getOrNull()
        assertNotNull(doc)
        val ns = doc!!.documentElement.getAttributeNode("xmlns:android")?.nodeValue
        assertEquals("http://schemas.android.com/apk/res/android", ns)
    }

    @Test fun edge_missingAndroidNamespace() {
        val noNs = """
            <?xml version="1.0" encoding="utf-8"?>
            <manifest>
            </manifest>
        """.trimIndent()
        val doc = parse(noNs).getOrNull()
        assertNotNull(doc)
        assertTrue(doc!!.documentElement.getAttribute("xmlns:android").isNullOrBlank())
    }

    @Test fun edge_malformedXml_throws() {
        val malformed = """
            <?xml version="1.0" encoding="utf-8"?>
            <manifest xmlns:android="http://schemas.android.com/apk/res/android">
        """.trimIndent()
        val ex = parse(malformed).exceptionOrNull()
        assertTrue(ex is SAXParseException)
    }

    @Test fun security_disallowDoctype() {
        val withDoctype = """
            <?xml version="1.0" encoding="utf-8"?>
            <!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
            <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            </manifest>
        """.trimIndent()
        val ex = parse(withDoctype).exceptionOrNull()
        assertTrue(ex is ParserConfigurationException || ex is SAXParseException)
    }
}
private fun String?.isNullOrBlank(): Boolean = this == null || this.isBlank()