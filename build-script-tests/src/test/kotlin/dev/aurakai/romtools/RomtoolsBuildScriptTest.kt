
// AUTOGENERATED: Real-file validations and VerifyRomToolsTask source checks (JUnit 5 / Kotlin)

/**
 * Framework: JUnit 5 (Jupiter) with Kotlin.
 * These additions read actual files (if present) to validate the PR diff behavior.
 */
object RomtoolsRealFileHelper {
    private fun findUpwards(relative: String, maxAscend: Int = 8): java.nio.file.Path? {
        var dir = java.nio.file.Paths.get("").toAbsolutePath().normalize()
        repeat(maxAscend + 1) {
            val candidate = dir.resolve(relative).normalize()
            if (java.nio.file.Files.exists(candidate)) return candidate
            dir = dir.parent ?: return null
        }
        return null
    }

    fun readRomtoolsBuildGradleOrNull(): String? =
        findUpwards("romtools/build.gradle.kts")?.let { java.nio.file.Files.readString(it) }

    fun readVerifyRomToolsTaskOrNull(): String? =
        findUpwards("buildSrc/src/main/kotlin/VerifyRomToolsTask.kt")?.let { java.nio.file.Files.readString(it) }

    fun countMatches(text: String, pattern: Regex): Int = pattern.findAll(text).count()
}

class RomtoolsBuildScript_RealFileTests {

    private fun loadOrSkip(): String {
        val content = RomtoolsRealFileHelper.readRomtoolsBuildGradleOrNull()
        org.junit.jupiter.api.Assumptions.assumeTrue(content != null, "romtools/build.gradle.kts not found; skipping real-file tests")
        return content!!
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: plugins aliases appear in expected order")
    fun real_plugins_order() {
        val script = loadOrSkip()
        val block = Regex("plugins\\s*\\{(?s).*?\\}", RegexOption.DOT_MATCHES_ALL).find(script)?.value
            ?: org.junit.jupiter.api.Assertions.fail("plugins block not found in real file")
        val order = listOf(
            "alias(libs.plugins.android.library)",
            "alias(libs.plugins.kotlin.serialization)",
            "alias(libs.plugins.ksp)",
            "alias(libs.plugins.hilt)",
            "alias(libs.plugins.dokka)",
            "alias(libs.plugins.spotless)",
            "alias(libs.plugins.kotlin.compose)",
            "alias(libs.plugins.kotlin.android)"
        )
        var last = -1
        order.forEach { p ->
            val at = block.indexOf(p)
            org.junit.jupiter.api.Assertions.assertTrue(at >= 0, "Missing plugin alias: $p")
            org.junit.jupiter.api.Assertions.assertTrue(at > last, "Plugin alias out of order: $p")
            last = at
        }
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: Java toolchain and compile options target Java 24")
    fun real_java24() {
        val script = loadOrSkip()
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("languageVersion\\.set\\(\\s*JavaLanguageVersion\\.of\\(24\\)\\s*\\)").containsMatchIn(script),
            "Expected JavaLanguageVersion.of(24)"
        )
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("sourceCompatibility\\s*=\\s*JavaVersion\\.VERSION_24").containsMatchIn(script)
                    && Regex("targetCompatibility\\s*=\\s*JavaVersion\\.VERSION_24").containsMatchIn(script),
            "Expected JavaVersion.VERSION_24 for source/target"
        )
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: Android config core values")
    fun real_android_core() {
        val script = loadOrSkip()
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("""namespace = "dev.aurakai.auraframefx.romtools""""), "Missing namespace")
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("compileSdk = 36"), "Missing compileSdk 36")
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("minSdk = 33"), "Missing minSdk 33")
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("""testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner""""), "Missing test runner")
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("""consumerProguardFiles("consumer-rules.pro")"""), "Missing consumerProguardFiles")
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: NDK and externalNativeBuild are conditionally applied")
    fun real_ndk_externalNativeBuild_guarded() {
        val script = loadOrSkip()
        val guardCount = RomtoolsRealFileHelper.countMatches(
            script,
            Regex("""project\.file\("src/main/cpp/CMakeLists\.txt"\)\.exists\(\)""")
        )
        org.junit.jupiter.api.Assertions.assertTrue(guardCount >= 2, "Expected at least two guards for CMakeLists existence")
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("""externalNativeBuild\s*\{\s*cmake\s*\{\s*path\s*=\s*file\("src/main/cpp/CMakeLists\.txt"\)\s*version\s*=\s*"3\.22\.1"""",
                  RegexOption.DOT_MATCHES_ALL).containsMatchIn(script),
            "externalNativeBuild cmake version should be 3.22.1"
        )
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: Build features set and negative checks applied")
    fun real_build_features() {
        val script = loadOrSkip()
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("compose = true"))
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("buildConfig = true"))
        org.junit.jupiter.api.Assertions.assertTrue(script.contains("viewBinding = false"))
        org.junit.jupiter.api.Assertions.assertFalse(Regex("""viewBinding\s*=\s*true""").containsMatchIn(script), "viewBinding must not be enabled")
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: Packaging excludes include critical META-INF entries")
    fun real_packaging_excludes() {
        val script = loadOrSkip()
        val needed = listOf(
            """/META-INF/{AL2.0,LGPL2.1}""",
            """/META-INF/DEPENDENCIES""",
            """/META-INF/LICENSE""",
            """/META-INF/LICENSE.txt""",
            """/META-INF/NOTICE""",
            """/META-INF/NOTICE.txt""",
            """META-INF/*.kotlin_module"""
        )
        needed.forEach { org.junit.jupiter.api.Assertions.assertTrue(script.contains(it), "Missing packaging exclude: $it") }
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("packaging\\s*\\{(?s).*resources\\s*\\{(?s).*excludes \\+= listOf\\(", RegexOption.DOT_MATCHES_ALL).containsMatchIn(script),
            "excludes should be added under packaging/resources"
        )
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("REAL FILE: copyRomTools and verifyRomTools tasks present exactly once, build depends on verifyRomTools")
    fun real_tasks_registered_once_and_dependency_wired() {
        val script = loadOrSkip()
        val copyCount = RomtoolsRealFileHelper.countMatches(script, Regex("""tasks\.register<\s*Copy\s*>\("copyRomTools"\)"""))
        val verifyCount = RomtoolsRealFileHelper.countMatches(script, Regex("""tasks\.register<\s*VerifyRomToolsTask\s*>\("verifyRomTools"\)"""))
        org.junit.jupiter.api.Assertions.assertEquals(1, copyCount, "copyRomTools should be registered exactly once")
        org.junit.jupiter.api.Assertions.assertEquals(1, verifyCount, "verifyRomTools should be registered exactly once")
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("""tasks\.named\("build"\)\s*\{\s*dependsOn\("verifyRomTools"\)\s*\}""").containsMatchIn(script),
            "build should depend on verifyRomTools"
        )
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("""romToolsDir\.set\(\s*romToolsOutputDirectory\s*\)""").containsMatchIn(script),
            "verifyRomTools should be wired to shared DirectoryProperty"
        )
        org.junit.jupiter.api.Assertions.assertTrue(
            script.contains("""include("**/*.so", "**/*.bin", "**/*.img", "**/*.jar")""") &&
            script.contains("""includeEmptyDirs = false"""),
            "copyRomTools must include patterns and avoid empty dirs"
        )
    }
}

class VerifyRomToolsTask_SourceTests {

    private fun loadOrSkip(): String {
        val content = RomtoolsRealFileHelper.readVerifyRomToolsTaskOrNull()
        org.junit.jupiter.api.Assumptions.assumeTrue(content != null, "buildSrc VerifyRomToolsTask.kt not found; skipping source tests")
        return content!!
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("VerifyRomToolsTask declares class extending DefaultTask")
    fun task_class_decl() {
        val src = loadOrSkip()
        org.junit.jupiter.api.Assertions.assertTrue(
            Regex("""abstract\s+class\s+VerifyRomToolsTask\s*:\s*DefaultTask\(\s*\)""").containsMatchIn(src)
                    || Regex("""abstract\s+class\s+VerifyRomToolsTask\s*:\s*DefaultTask\b""").containsMatchIn(src),
            "Expected 'abstract class VerifyRomToolsTask : DefaultTask'"
        )
    }

    @org.junit.jupiter.api.Test
    @org.junit.jupiter.api.DisplayName("VerifyRomToolsTask exposes romToolsDir DirectoryProperty with @InputDirectory and @Optional")
    fun task_property_annotations() {
        val src = loadOrSkip()
        val annotatedProperty = Regex(
            """(@get:InputDirectory\s*@get:Optional|@get:Optional\s*@get:InputDirectory)\s*abstract\s+val\s+romToolsDir\s*:\s*DirectoryProperty""",
            RegexOption.DOT_MATCHES_ALL
        ).containsMatchIn(src)
        org.junit.jupiter.api.Assertions.assertTrue(annotatedProperty, "romToolsDir property must be annotated and typed DirectoryProperty")
    }
}